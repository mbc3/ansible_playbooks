---
- name: Copy OpenTofu repo
  ansible.builtin.copy:
    src: opentofu.repo
    dest: /etc/yum.repos.d/opentofu.repo
    mode: "0644"
- name: Install necessary packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
  loop: "{{ semaphore_packages }}"
- name: Create semaphore user
  ansible.builtin.user:
    name: semaphore
    comment: Semaphore Service Account
    shell: /usr/bin/bash
    password: "{{ vault_semaphore_semaphore_password | password_hash('sha512', 'Dash0fSA1t') }}"
- name: Make SSH directory
  become: true
  become_user: semaphore
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: "0700"
- name: Generate Github SSH key
  become: true
  become_user: semaphore
  community.crypto.openssh_keypair:
    path: ~/.ssh/github
    owner: semaphore
    group: semaphore
    comment: "MBC Github"
    type: "ed25519"
- name: Set ssh config to use ipv4 to get around github's missing ipv6 support
  become: true
  become_user: semaphore
  community.general.ssh_config:
    user: semaphore
    host: "github.com"
    identity_file: "/home/semaphore/.ssh/github"
    state: present
    other_options:
      addressfamily: "inet"
- name: Set ssh config to include cloud servers
  become: true
  community.general.ssh_config:
    user: root # needs to be for root, otherwise semaphore won't use config
    host: "{{ item.key }}"
    hostname: "{{ item.value }}"
    identity_file: "/home/semaphore/.ssh/github"
    state: present
  loop: "{{ semaphore_cloud_servers | dict2items }}"
- name: Download Semaphore package
  ansible.builtin.get_url:
    url: "https://github.com/semaphoreui/semaphore/releases/download/v{{ semaphore_version }}/semaphore_{{ semaphore_version }}_linux_amd64.rpm"
    dest: "{{ semaphore_package_location }}"
    mode: "0770"
- name: Install Semaphore
  ansible.builtin.dnf:
    name: "{{ semaphore_package_location }}"
    state: present
    disable_gpg_check: true
- name: Enable MariaDB
  ansible.builtin.systemd_service:
    name: mariadb
    state: started
    enabled: true
- name: Create semaphore database
  community.mysql.mysql_db:
    name: semaphore
    state: present
    login_unix_socket: /var/lib/mysql/mysql.sock
- name: Create semaphore db user
  community.mysql.mysql_user:
    state: present
    name: semaphore
    password: "{{ vault_semaphore_db_password }}"
    priv:
      'semaphore.*': 'ALL'
    login_unix_socket: /var/lib/mysql/mysql.sock
- name: Tell user to run firstname setup
  ansible.builtin.debug:
    msg: "please run 'semphore setup'"
- name: Copy ansible collections requirements.yml
  ansible.builtin.copy:
    src: requirements.yml
    dest: /home/semaphore/requirements.yml
    owner: semaphore
    group: semaphore
    mode: "0644"
- name: Allow semaphore user to own semaphore tmp dir
  ansible.builtin.file:
    path: /tmp/semaphore
    state: directory
    owner: semaphore
    group: semaphore
    mode: "0755"
- name: Install semaphore systemd service
  ansible.builtin.copy:
    src: semaphore.service
    dest: /etc/systemd/system/semaphore.service
    owner: root
    group: root
    mode: "0644"
- name: Enable semaphore service
  ansible.builtin.systemd_service:
    name: semaphore
    daemon_reload: true
    state: started
    enabled: true




# Old container method -- I prefer installing it directly on the VM

# - name: Create Semaphore podman network
#   become: true
#   become_user: semaphore
#   containers.podman.podman_network:
#     name: semaphore
#     subnet: 192.168.10.0/24
#     gateway: 192.168.10.1
#     ipv6: false
#     state: quadlet
#     quadlet_filename: semaphore
#     quadlet_dir: "/home/semaphore/.config/containers/systemd/"
#     quadlet_options:
#       - |
#         [Install]
#         WantedBy=default.target
#   notify:
#     - Restart Semaphore DB
#     - Restart Semaphore

# - name: Create Semaphore mysql quadlet file
#   become: true
#   become_user: semaphore
#   containers.podman.podman_container:
#     name: semaphore-mysql
#     hostname: mysql
#     image: docker.io/library/mysql:8.0
#     volume:
#       - "semaphore-mysql:/var/lib/mysql"
#     publish: 3306:3306
#     network: semaphore
#     env:
#       MYSQL_RANDOM_ROOT_PASSWORD: "yes"
#       MYSQL_DATABASE: "semaphore"
#       MYSQL_USER: "{{ semaphore_mysql_db_user }}"
#       MYSQL_PASSWORD: "{{ semaphore_mysql_db_password }}"
#     state: quadlet
#     quadlet_filename: semaphore-mysql
#     quadlet_dir: "/home/semaphore/.config/containers/systemd/"
#     quadlet_options:
#       - "AutoUpdate=registry"
#       - |
#         [Service]
#         Restart=always
#         [Unit]
#         After=semaphore.network
#         Before=semaphore-app.service
#         [Install]
#         WantedBy=default.target
#   notify:
#     - Restart Semaphore DB
#     - Restart Semaphore

# - name: Create Semaphore quadlet file
#   become: true
#   become_user: semaphore
#   containers.podman.podman_container:
#     name: semaphore-app
#     image: docker.io/semaphoreui/semaphore:latest
#     publish: 3000:3000
#     network: semaphore
#     dns_search:
#       - dns.podman # need this to talk to mysql container
#       - localdomain # need this to talk to other vms / lxc containers
#     env:
#       SEMAPHORE_DB_USER: "{{ semaphore_mysql_db_user }}"
#       SEMAPHORE_DB_PASS: "{{ semaphore_mysql_db_password }}"
#       SEMAPHORE_DB_HOST: "mysql"
#       SEMAPHORE_DB_PORT: "3306"
#       SEMAPHORE_DB_DIALECT: "mysql"
#       SEMAPHORE_DB: "semaphore"
#       SEMAPHORE_PLAYBOOK_PATH: "/tmp/semaphore/"
#       SEMAPHORE_ADMIN_PASSWORD: "{{ semaphore_admin_password }}"
#       SEMAPHORE_ADMIN_NAME: admin
#       SEMAPHORE_ADMIN_EMAIL: "{{ semaphore_admin_email }}"
#       SEMAPHORE_ADMIN: admin
#       SEMAPHORE_ACCESS_KEY_ENCRYPTION: yTAT7nm1p+MozxEtliYZKkt32XzBcAAdaSd/UxTgoUk= # head -c32 /dev/urandom | base64
#       SEMAPHORE_LDAP_ACTIVATED: "no"
#     state: quadlet
#     quadlet_filename: semaphore-app
#     quadlet_dir: "/home/semaphore/.config/containers/systemd/"
#     quadlet_options:
#       - "AutoUpdate=registry"
#       - |
#         [Service]
#         Restart=always
#         [Unit]
#         After=semaphore.network
#         [Install]
#         WantedBy=default.target
#   notify:
#     - Restart Semaphore DB
#     - Restart Semaphore
